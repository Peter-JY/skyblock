import java.text.SimpleDateFormat

plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def buildDate = new Date()
if (project.mod_version.endsWith('-dev')) {
	def df = new SimpleDateFormat(".yyyyMMdd.HHmmss")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	project.mod_version += df.format(buildDate)
}

def branch = gitBranch()
if (branch != "main") {
	project.mod_version += "+" + branch;
}

archivesBaseName = project.name
version = project.mod_version
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/skyblock.accesswidener")
}

repositories {
	maven {
		name = 'masa'
		url = 'https://masa.dy.fi/maven/'
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "carpet:fabric-carpet:${project.minecraft_version}-${project.carpet_core_version}"

	// javax.annotation.Nullable/Nonnull
	compileOnly "com.google.code.findbugs:jsr305:3.0.1"
	}

static def gitCommit() {
	def commit = ""
	def proc = "git rev-parse HEAD".execute()
	proc.in.eachLine { line -> commit = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	commit
}

static def gitBranch() {
	def branch = ""
	def proc = "git rev-parse --abbrev-ref HEAD".execute()
	proc.in.eachLine { line -> branch = line }
	proc.err.eachLine { line -> println line }
	proc.waitFor()
	branch
}

static def gitStatus() {
	def exitCode = "git diff --quiet".execute().waitFor() // not added
	if (exitCode == 0) {
		exitCode = "git diff --cached --quiet".execute().waitFor() // not committed
	}
	exitCode == 0
}

task generateJava(type: Copy) {
	def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
	df.setTimeZone(TimeZone.getTimeZone("UTC"))
	/*def templateContext = [
			version: project.version,
			timestamp: df.format(buildDate),
			branch: gitBranch,
			commit: gitCommit,
			working_dir_clean: gitStatus,
			minecraft_version: project.minecraft_version,
			yarn_mappings: project.yarn_mappings
	]
	inputs.properties templateContext // for gradle up-to-date check
	from 'src/template/java'
	into "$buildDir/generated/java"
	expand templateContext*/
}

sourceSets.main.java.srcDir "$buildDir/generated/java"
compileJava.dependsOn generateJava

processResources {
	// this will ensure that this task is re-run when there's a change
	inputs.property "version", project.version

	// replace stuff in fabric.mod.json, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"

		// add mod metadata
		expand "version": project.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	it.options.release = 17
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}